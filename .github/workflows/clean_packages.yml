# Copyright (c) 2023 Michael Beckh
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
name: Clean Packages
run-name: '${{github.event_name == 'repository_dispatch' && format('"Clean Packages{0} triggered by {2} #{3} in {1}"', !github.event.client_payload.delete && ' (Dry-Run) || '', github.event.client_payload.origin.repository, github.event.client_payload.origin.workflow.name, github.event.client_payload.origin.workflow.run_number) || ''}}'

on:
  push:
    paths: [ '.github/workflows/clean_packages.yml' ]
  workflow_dispatch:
    inputs:
      older-than-days:
        description: Only delete versions older than this number of days (optional, default is 120).
        type: string
        default: '120'
      delete:
        description: Do delete, default is output only (optional, default is false).
        type: boolean
        default: false
  repository_dispatch:
    types: [ clean_packages ]

permissions: {}

concurrency:
  group: ${{github.workflow}}-${{github.event_name}}-${{github.ref}}
  cancel-in-progress: true

jobs:
  clean_packages:
    name: Clean Packages
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
    - name: Delete Expired Versions
      shell: bash
      env:
        INPUT_OLDER_THAN_DAYS: ${{inputs.older-than-days || (github.event_name == 'repository_dispatch' && github.event.client_payload.older-than-days) || github.event_name == 'push' && 7 || 120}}
        INPUT_DELETE: ${{github.event_name != 'push' && (inputs.delete || (github.event_name == 'repository_dispatch' && github.event.client_payload.delete))}} # Push trigger is for test and therefore dry-run only
        GITHUB_TOKEN: ${{github.token}}
      run: |
        [[ $INPUT_DELETE == true ]] && echo "Cleaning packages older than $INPUT_OLDER_THAN_DAYS days." || echo "Dry-run for cleaning packages older than $INPUT_OLDER_THAN_DAYS days."

        function load_paged {
          curl -D "$2.headers" --no-progress-meter \
               -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
               "$1" > "$2"
          next=$(egrep -i '^link: ' "$2.headers" | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
          while [[ -n $next ]]; do
            curl -D "$2.headers" --no-progress-meter \
                 -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
                 "$next" >> "$2"
            next=$(egrep -i '^link: ' "$2.headers" | grep -P -i -o '(?<=<)([\S]*)(?=>; rel="next")') || [[ $? == 1 ]]
          done
          [[ $RUNNER_DEBUG != 1 ]] || (echo "::group::$1" && cat "$2" && echo "::endgroup::")
        }

        load_paged "$GITHUB_API_URL/user/packages?package_type=nuget" packages.json
        jq -r -s '.[]
                  | map( [ .name ]
                    + ( .name
                        | match("^(.+)_(.+?)$")
                        | [ .captures[].string ]
                      )
                  ) | .[] | @tsv' packages.json \
        | while IFS=$'\t' read package_key package_name package_triplet; do
            echo "Checking package $package_key"
            echo "## Package $package_name ($package_triplet)" >> $GITHUB_STEP_SUMMARY
            load_paged "$GITHUB_API_URL/user/packages/nuget/$package_key/versions?state=active" versions.json
            versions_delete=$(jq -r -s --argjson days "$INPUT_OLDER_THAN_DAYS" '
                                (now - $days * 24 * 60 * 60) as $limit
                                | .[]
                                | sort_by(.updated_at)
                                | reverse
                                | .[1:]
                                | map( (.updated_at |= fromdateiso8601)
                                       | select(.updated_at < $limit))
                                | to_entries[]
                                | [ .key, .value.id
                                    , (.value.name | match("^(.+)-(vcpkg[0-9a-f]+)$") | .captures[].string)
                                    , (.value.updated_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
                                  ] | @tsv' versions.json)
            has_list=0
            while IFS=$'\t' read sequence version_id version_name version_hash version_updated ; do
              if [[ -n $sequence ]]; then
                if [[ $sequence == 0 ]]; then
                  if [[ $INPUT_DELETE == true ]]; then
                    echo "### Deleted versions of package $package_name" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "### Would delete versions of package $package_name" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "| Package | Version | Hash | Updated |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                  has_list=1
                fi
               echo "| $package_name | $version_name | $version_hash | $version_updated |" >> $GITHUB_STEP_SUMMARY
                if [[ $INPUT_DELETE == true ]]; then
                  echo "Deleting version $version_name-$version_hash (last updated: $version_updated)"
                  curl -X DELETE --no-progress-meter \
                       -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN"
                       "$GITHUB_API_URL/user/packages/nuget/$package_key/versions/$version_id"
                fi
              fi
            done <<< "$versions_delete"
            [[ $has_list != 1 ]] || echo >> $GITHUB_STEP_SUMMARY

            echo "### Retain versions of package $package_name" >> $GITHUB_STEP_SUMMARY
            versions_retain=$(jq -r -s --argjson days "$INPUT_OLDER_THAN_DAYS" '
                                (now - $days * 24 * 60 * 60) as $limit
                                | .[]
                                | sort_by(.updated_at)
                                | reverse
                                | map(.updated_at |= fromdateiso8601)
                                | (.[:1] + (.[1:] | map(select(.updated_at >= $limit))))
                                | to_entries[]
                                | [ .key, .value.id
                                    , (.value.name | match("^(.+)-(vcpkg[0-9a-f]+)$") | .captures[].string)
                                    , (.value.updated_at | gmtime | strftime("%Y-%m-%d %H:%M:%S"))
                                  ] | @tsv' versions.json)
            has_list=0
            while IFS=$'\t' read sequence version_id version_name version_hash version_updated ; do
              if [[ -n $sequence ]]; then
                if [[ $sequence == 0 ]]; then
                  echo "| Package | Version | Hash | Updated |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                  has_list=1
                fi
                echo "| $package_name | $version_name | $version_hash | $version_updated |" >> $GITHUB_STEP_SUMMARY
              fi
            done <<< "$versions_retain"
            [[ $has_list != 0 ]] || echo "None." >> $GITHUB_STEP_SUMMARY
            echo >> $GITHUB_STEP_SUMMARY
          done
